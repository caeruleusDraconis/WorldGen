// Copyright 2022 - 2022, Caeruleus Draconis and Taiterio
// SPDX-License-Identifier: Apache-2.0

package caeruleusTait.WorldGen;

import caeruleusTait.WorldGen.worker.WGLevel;
import net.minecraft.world.level.lighting.LevelLightEngine;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.server.ServerLifecycleHooks;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Mod("world_gen")
public class WorldGen {
    // This logger is used to write text to the console and the log file.
    // It is considered best practice to use your mod id as the logger's name.
    // That way, it's clear which mod wrote info, warnings, and errors.
    public static final Logger LOGGER = LoggerFactory.getLogger("world-gen");

    /*
    public static final DeferredRegister<ConfiguredFeature<?, ?>> CONFIGURED_FEATURES = DeferredRegister.create(Registry.CONFIGURED_FEATURE_REGISTRY, "world_gen");
    public static final DeferredRegister<PlacedFeature> PLACED_FEATURES = DeferredRegister.create(Registry.PLACED_FEATURE_REGISTRY, "world_gen");
    */

    // Global state
    public static WGLevel currentLevel = null;
    public static ThreadLocal<LevelLightEngine> writeLightEngine = new ThreadLocal<>();

    public static void onFakeServerStart() {
        if (currentLevel == null) {
            return;
        }
        ServerLifecycleHooks.handleServerAboutToStart(currentLevel.getServer());
    }

    public static void onFakeServerStop() {
        if (currentLevel == null) {
            return;
        }
        ServerLifecycleHooks.handleServerStopped(currentLevel.getServer());
    }

    public WorldGen() {
        // This code runs as soon as Minecraft is in a mod-load-ready state.
        // However, some things (like resources) may still be uninitialized.
        // Proceed with mild caution.

        // ScreenEvents.AFTER_INIT.register(SelectWorldScreenListener::afterInit);

        LOGGER.info("WorldGen initialized");

        /* Debug code for a custom ore
        IEventBus bus = FMLJavaModLoadingContext.get().getModEventBus();

        List<OreConfiguration.TargetBlockState> replacementes = List.of(
                        OreConfiguration.target(OreFeatures.STONE_ORE_REPLACEABLES, Blocks.GLOWSTONE.defaultBlockState()),
                        OreConfiguration.target(OreFeatures.DEEPSLATE_ORE_REPLACEABLES, Blocks.GLOWSTONE.defaultBlockState())
        );

        RegistryObject<ConfiguredFeature<?, ?>> feature = CONFIGURED_FEATURES.register(
                "test_glowsone_ore",
                () -> new ConfiguredFeature<>(Feature.ORE, new OreConfiguration(replacementes, 11))
        );
        RegistryObject<PlacedFeature> testGlowsoneOre = PLACED_FEATURES.register(
                "test_glowsone_ore",
                () -> new PlacedFeature(feature.getHolder().get(), List.of(
                        CountPlacement.of(8),
                        InSquarePlacement.spread(),
                        HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.aboveBottom(64)),
                        BiomeFilter.biome()
                ))
        );

        CONFIGURED_FEATURES.register(bus);
        PLACED_FEATURES.register(bus);
         */
    }
}
